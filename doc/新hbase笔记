线性模块话扩展方式
严格一致性读写
自动可配置表切割
区域服务器之间自动容灾
通过服务器端过滤器实现查询预测
面向列的数据库

-----------------------------------------------------------------------------------------------

hbase存储机制
面向列存储，table是按行排序
表是行的集合，行是列族的集合，列族是列的集合，列是键值对的集合，还有数据版本（时间戳）

----------------------------------------------------------------------------------------------

HBASE安装
解压，配置环境变量
HBASE_HOME=/usr/local/hbase-1.2.7
PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$MONGODB_HOME/bin:$HBASE_HOME/bin
export JAVA_HOME HADOOP_HOME HADOOP_CONF_DIR MONGODB_HOME HBASE_HOME PATH

-------------
vi hbase-env.sh
export JAVA_HOME=/usr/local/jdk1.8.0_192
export HBASE_MANAGES_ZK=false

vi hbase-site.xml
<configuration>
<property>
    <name>hbase.rootdir</name>
    <value>hdfs://hdp12/hbase</value>
</property>s
<property>
      <name>hbase.cluster.distributed</name>
      <value>true</value>
</property>
<property>
    <name>hbase.zookeeper.quorum</name>
    <value>node3:2181,node4:2181,node5:2181</value>
</property>
</configuration>

vi regionservers 
node1
node2
node3
node4
node5

在Master节点启动
start-hbase.sh
在备用master上输入
hbase-daemon.sh start master启动备用服务器

登陆http://node1:16010/ 查看hbase

hbase shell 进入hbase命令行
输入help获取命令列表

--------------------------------------------------------------------------------------

命令分组
---------
	常规组[general]
	version whoami
---------------------------------------------
	ddl组[ddl]

	创建表
	create 'mydatabase:t1',{NAME => 'f1'}, {NAME => 'f2'}, {NAME => 'f3'} 
	         名字空间   表名     列族f1          列族f2           列族f3
------------------------
	查看表结构
	describe 'mydatabase:t1'


----------------------------------------------

	[namespace]类似于mysql的库概念
	
	list_namespace  //列出名字空间
	list_namespace_tables 'default'  //列出default名字空间下的tables
	create_namespace 'mydatabase' //创建名字空间

----------------------------------------------
	dml
	插入数据
	put 'mydatabase:t1', 'r1', 'f1:id', 100
	put 'mydatabase:t1', 'r1', 'f1:name', 'zhangsan'
	      名字空间    表名  行键   列族 列的key  列的v
    
    查询数据
    get 'mydatabase:t1','r2' //拿第二行数据
    scan 'mydatabase:t1'   //扫描t1表
    
    count 'mydatabase:t1'  //统计表的行数
-----------------------------------------------------------------------------------------

regionServer包含很多区域，区域就是由大表切出来的小表，区域信息存在hbase:meta里

/hbase/data/mydatabase/t1/6bf41c58b439f4b29b1b4ece1725e2f5/f1
             名字空间   表名      区域名                      列族

-----------------------------------------------------------------------------------------------

Hbase集群启动时，master负责分配区域到指定的区域服务器


客户端交互Hbase过程
1、联系zk，找出meta表所在regionServer
2、通过查询meta，定位row key，找到对应region server
3、缓存信息在本地
4、联系regionServer
5、HRegionServer负责open HRegion对象，为每个列族创建store实例，他们是对HFile的轻量级封装，每个store还对应了一个MemStore（用于内存存储数据）

------------------------------------------------------------------------------------------------
[WAL目录结构]
hdfs://hdp12/hbase/WALs/$区域服务器名称/
当写入数据时，先写入写前日志，再把数据写到memStore中去，memStore会溢出到磁盘

---------------------------------------------------------------------------------------------

批量写入
关闭写前日志和数据自动提交
@Test
    public void batchInsert() throws IOException {
        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);


        TableName tname = TableName.valueOf("mydatabase:t1");
        HTable table = (HTable) conn.getTable(tname);
        //不要自动清理缓冲区
        table.setAutoFlush(false);
        for(int i =4; i < 100000; i ++){
            Put put = new Put(Bytes.toBytes("r" + i));
            put.addColumn(Bytes.toBytes("f1"), Bytes.toBytes("id"), Bytes.toBytes(i));
            put.addColumn(Bytes.toBytes("f1"), Bytes.toBytes("name"), Bytes.toBytes("tom"+i));
            //关闭写前日志
            put.setWriteToWAL(false);
            table.put(put);
            if(i % 2000 == 0){
                table.flushCommits();
            }
        }
        table.flushCommits();
    }

-----------------------------------------------------------------------------------------------

删除表
先禁用表
disable 'mydatabase:t1'
再删除

enable 'ns2:t2' //启用一张表

--------------------------------------------------------------------------

flush 'mydatabase:t1' 	清理表中的内存数据到磁盘

---------------------------------------------------------------------------------------------

hbase默认切割region的阀值 10737418240b（字节）  当文件达到10G大小时进行切割
<property>
<name>hbase.hregion.max.filesize</name>
<value>10737418240</value>
<source>hbase-default.xml</source>
</property>

---------------------------------------------------------------------------------------------

meta表的信息，startKey 包含起始行    endKey 不包含结束行

split 'mydatabase:t1' 将整张表对半切开
split 'regionName', 'rowKey' 按区域和rowKey切开
regionName用  scan 'hbase:meta' 找
mydatabase:t1,025090,1554086476468.5f4791b3b3171ccc28912 column=info:regioninfo, timestamp=1554086477462, value={ENCODED => 5f4791b3b3171ccc28912e72470cd9c2, NAME => 'mydatabase:t1,025090,1554086476468.5f4791b3b3171ccc28912e72
 e72470cd9c2.                                             470cd9c2.', STARTKEY => '025090', ENDKEY => '050175'} 

 此条数据regionName为mydatabase:t1,025090,1554086476468.5f4791b3b3171ccc28912e72470cd9c2.

------------------------

 移动region，
 move 'ENCODED', 'SERVER_NAME'
 例如把上面region移动到别的regionServer去
 就是
 move '5f4791b3b3171ccc28912e72470cd9c2', 'node3,16020,1554087822363'
 											在webui上看

 ----------------------------

合并两个区域
 merge_region '72fd464eddbddf2ec7e1e2bd447a59ad', '5f4791b3b3171ccc28912e72470cd9c2'

---------------------------------------------------------------------------------------------------

hbase与高可用hdfs整合
vi hbase-env.sh
# Extra Java CLASSPATH elements.  Optional.
export HBASE_CLASSPATH=$HBASE_CLASSPATH:/usr/local/hadoop-2.8.5/etc/hadoop
或者
把hdfs-site.xml和core-sit.xml复制到hbase的conf下

---------------------------------------------------------------------------------------------------

拆分风暴
如果多个表同时到达10G的切割阀值，就会同时切割，会产生性能问题
避免拆分风暴就需要把
<property>
<name>hbase.hregion.max.filesize</name>
<value>107374182400</value>  //设置成100G
<source>hbase-default.xml</source>
</property>
设置的大一些，让其难触发自动切割，然后手动切割

-----------------------------------------------------------------------------------------------

HBase存储是以键值对方式存储的<K,V>，K是三级定位rowId+family+col+time 每个k都是这样写，所以冗余数据很大
所以rowId，family，col在定义的时候不要很长,列族争取就用一个字符，列最好也用一个

---------------------------------------------------------------------------------------------------

预切割
	创建表时，预先对表进行切割
	切割线是rowKey
	create 'ns2:t3', 'f1', SPLITS => ['10000', '20000', '30000']

---------------------------------------------------------------------------------------------------

创建3历史版本的表，列族的版本号
create 'ns2:t1', {NAME=>'f1',VERSIONS=>3}, SPLITS => ['10000', '20000', '30000'] 
获取历史版本
get 'ns2:t1', '000001', {COLUMN => 'f1', VERSIONS => 3}
                rowKey       列族            返回版本数


查询指定时间戳的数据
get 'ns2:t1', '000001', {COLUMN => 'f1', TIMESTAMP => 1554105730811}
查询时间范围
get 'ns2:t1', '000001', {COLUMN => 'f1', TIMERANGE => [1554105730810,1554105737842], VERSIONS => 3}

---------------------------------------------------------------------------------------------------

原生扫描
scan 'ns2:t1', {COLUMNS=>'f1', RAW => true, VERSIONS => 10}

删除要指定时间戳
delete 'ns2:t1', '000001', 'f1:name', 1554105730811
删除后再原生扫描
ROW                                                                      COLUMN+CELL                                            000001                                                                  column=f1:name, timestamp=1554108525382, value=tom6     000001                                                                  column=f1:name, timestamp=1554108522225, value=tom5     000001                                                                  column=f1:name, timestamp=1554108517374, value=tom4     000001                                                                  column=f1:name, timestamp=1554108514077, value=tom3     000001                                                                  column=f1:name, timestamp=1554105737841, value=tom2     000001                                                                  column=f1:name, timestamp=1554105734553, value=tom1     000001                                                                  column=f1:name, timestamp=1554105730811, type=Delete    000001                                                                  column=f1:name, timestamp=1554105730811, value=tom 
如果删除tom5，
再get
get 'ns2:t1', '000001', {COLUMN=>'f1', VERSIONS => 10}
就会得到
COLUMN                                                                   CELL                                                   f1:name                                                                 timestamp=1554108525382, value=tom6                     f1:name                                                                 timestamp=1554108517374, value=tom4                     f1:name                                                                 timestamp=1554108514077, value=tom3      

-------------------------------------------------------------------------------------------------------------------

设置过期时间
 create 'ns2:t2' , {NAME=>'f1', TTL=>60, VERSIONS => 3}
 								设置60秒过期
这是对所有数据而言的，包括删除和没有删除的数据

---------------------------------------------------------------------------------------

创建KEEP_DELETED_CELLS=>true 的表
create 'ns2:t4',{NAME=>'f1',VERSIONS=>3,KEEP_DELETED_CELLS=>true}
put 'ns2:t4','r1','f1:name','tom1'
put 'ns2:t4','r1','f1:name','tom2'
put 'ns2:t4','r1','f1:name','tom3'

scan 'ns2:t4',{COLUMN=>'f1',RAW=>true,VERSIONS=>5}得
ROW                                  COLUMN+CELL                                                                                                                                    r1                                  column=f1:name, timestamp=1554172164547, value=tom3                                                     
r1                                  column=f1:name, timestamp=1554172161313, value=tom2  
r1                                  column=f1:name, timestamp=1554172161310, value=tom1
然后执行delete 'ns2:t4', 'r1', 'f1', 1554172164547
再执行scan 'ns2:t4',{COLUMN=>'f1',RAW=>true,VERSIONS=>5}得
ROW                                  COLUMN+CELL                                                                                             
 r1                                  column=f1:, timestamp=1554172167655, type=Delete                                                        
 r1                                  column=f1:name, timestamp=1554172167655, value=tom3                                                     
 r1                                  column=f1:name, timestamp=1554172164547, value=tom2                                                     
 r1                                  column=f1:name, timestamp=1554172161313, value=tom1 
但是get  和非原生scan还可以得到tom3

但是如果设置TTL，就会真正的删除
详见 hbase数据清除策略.png

---------------------------------------------------------------------------------------------

扫描器租约
ResultScanner scanner = table.getScanner(scan);
保证ResultScanner不会占用服务器太长时间
在hbase配置文件里
<property>
	<name>hbase.regionserver.lease.period</name>
	<value>120000</value>  //单位毫秒，设置为2分钟
</property>

--------------------------------------------------------------------------------------------------

扫描器缓存(面向行级别的)
ResultScanner在next的时候，每next一次就会向服务器发一次RPC请求，服务器游标就会向下读一行，默认是关闭扫描器缓存的

--------------------

可以在表的层面开启扫描器缓存，这样所有的scan都会开启扫描器缓存（全局）
设置hbase-site.xml
添加
<property>
	<name>hbase.client.scanner.caching</name>
	<value>10</value>   //设置缓存数为10
</property>

-1为不缓存

--------------------

可以在查询时设置操作层面的缓存
	Scan scan = new Scan();
	scan.setCaching(10);

----------------------------------------------------------------------------------------------------------------------

批量扫描是面向列级别的
	控制每次next()服务器端返回的列的个数
	scan.setBatch(int batch)

	ResultScanner一次next迭代出batch个列族中的列
	假如一行中有5列数据，batch设为3，那就会next两次，第一次取出前3列，第二次取出后2列，然后再next下一行

---------------------------------------------------------------------------------------------------------------------

hbase过滤器
 RowFilter行过滤器
	RowFilter rowFilter = new RowFilter(CompareFilter.CompareOp.LESS_OR_EQUAL, new BinaryComparator(Bytes.toBytes("000100")));
    scan.setFilter(rowFilter);

------------------------

 FamilyFilter列族过滤器

FamilyFilter familyFilter = new FamilyFilter(CompareFilter.CompareOp.LESS, new BinaryComparator(Bytes.toBytes("f2")));

----------------------------

 QualifierFilter列过滤器

 QualifierFilter qualifierFilter = new QualifierFilter(CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("id")));

---------------------------

 ValueFilter值过滤器

ValueFilter valueFilter = new ValueFilter(CompareFilter.CompareOp.EQUAL, new SubstringComparator("beijing"));
//除了rowid和addr，其他的值都是空的

---------------------------

依赖过滤器DependentColumnFilter 
DependentColumnFilter dependentColumnFilter = new DependentColumnFilter(Bytes.toBytes("f2")
                , Bytes.toBytes("id")
                , false
                , CompareFilter.CompareOp.NOT_EQUAL
                , new BinaryComparator(Bytes.toBytes("2")));
dropDependentColumn为false，整行返回
dropDependentColumn为true，不返回作为条件的列
---------------------------

SingleColumnValueFilter单列值过滤器，如果这列不满足，整行过滤掉，返回整行数据

SingleColumnValueFilter singleColumnValueFilter = new SingleColumnValueFilter(Bytes.toBytes("f2"), Bytes.toBytes("addr"), CompareFilter.CompareOp.NOT_EQUAL, Bytes.toBytes("beijing"));

返回
f1Id=[B@776aec5c/f1Name=[B@1d296da/f1Age=null/f2Id=[B@7c7a06ec/f2Name=[B@75d4a5c2/f2Age[B@557caf28/f2Addr=[B@408d971b
f1Id=[B@6c6cb480/f1Name=[B@3c46e67a/f1Age=[B@c730b35/f2Id=[B@206a70ef/f2Name=[B@292b08d6/f2Age[B@22555ebf/f2Addr=[B@36ebc363

-------------------------

SingleColumnValueExcludeFilter排除查询条件的单列查询过滤器，返回值中不包含查询条件

SingleColumnValueExcludeFilter singleColumnValueExcludeFilter = new SingleColumnValueExcludeFilter(Bytes.toBytes("f2"), Bytes.toBytes("addr"), CompareFilter.CompareOp.EQUAL, new BinaryComparator(Bytes.toBytes("beijing")));

返回
f1Id=[B@776aec5c/f1Name=null/f1Age=null/f2Id=[B@1d296da/f2Name=[B@7c7a06ec/f2Age[B@75d4a5c2/f2Addr=null

---------------------------

PrefixFilter前缀过滤器，是rowKey过滤器

PrefixFilter prefixFilter = new PrefixFilter(Bytes.toBytes("r1"));

----------------------------

PageFilter分页过滤器，是rowkey过滤，是在每个region上分页，如果有3个region就会返回30个数据

PageFilter pageFilter = new PageFilter(10);

-----------------------------

KeyOnlyFilter只获取列族和列和时间戳的信息而不会获取对应value的信息

KeyOnlyFilter keyOnlyFilter = new KeyOnlyFilter();
Scan scan = new Scan();
scan.setFilter(keyOnlyFilter);
ResultScanner scanner = table.getScanner(scan);
        Iterator<Result> iterator = scanner.iterator();
        while (iterator.hasNext()){
            Result next = iterator.next();
            List<Cell> columnCells = next.getColumnCells(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            for(Cell cell: columnCells){
                String f = Bytes.toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());
                String c = Bytes.toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());
                String v = Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());
                long ts = cell.getTimestamp();
                System.out.println(f+"-"+c+"-"+v+"-"+ts);
            }
        }

返回
f1-id--1554178507735
f1-id--1554178565235
f1-id--1554178636355

------------------------------

ColumnPaginationFilter列分页过滤器，假如一行里列族下共有5个列，limit 2，offset 2，就代表取第三个和第四个列

ColumnPaginationFilter columnPaginationFilter = new ColumnPaginationFilter(2, 2);
        Scan scan = new Scan();
        scan.setFilter(columnPaginationFilter);

        ResultScanner scanner = table.getScanner(scan);
        Iterator<Result> iterator = scanner.iterator();
        while (iterator.hasNext()){
            System.out.println("========================================");
            Result next = iterator.next();
            byte[] row = next.getRow();
            //System.out.println(Bytes.toString(row));
            NavigableMap<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> map = next.getMap();
            for(Map.Entry<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> familyMap:map.entrySet()){
                byte[] family = familyMap.getKey();

                for(Map.Entry<byte[], NavigableMap<Long, byte[]>> valueMap : familyMap.getValue().entrySet()){
                    byte[] col = valueMap.getKey();
                    System.out.println(Bytes.toString(row)+"/"+Bytes.toString(family)+"/"+Bytes.toString(col));
                }
            }
        }

返回
========================================
r1/f2/age
r1/f2/id
========================================
r2/f2/addr
r2/f2/age
========================================
r3/f1/name
r3/f2/addr


---------------------------------------

/**
     * 复杂sql查询
     * 等价于
     * select * from user where (age >= 13 and name like 'tome%') or addr like 'beijing%'
     * @throws IOException
     */
    @Test
    public void testComboFilter() throws IOException {
        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);

        TableName tableName = TableName.valueOf("ns2:t5");
        Table table = conn.getTable(tableName);

        SingleColumnValueFilter ft1 = new SingleColumnValueFilter(
                Bytes.toBytes("f2"),
                Bytes.toBytes("age"),
                CompareFilter.CompareOp.GREATER_OR_EQUAL,
                new BinaryComparator(Bytes.toBytes("13"))
        );

        SingleColumnValueFilter ft2 = new SingleColumnValueFilter(
                Bytes.toBytes("f2"),
                Bytes.toBytes("name"),
                CompareFilter.CompareOp.EQUAL,
                new RegexStringComparator("^tom")
        );
        //相当于and
        FilterList filterList = new FilterList(FilterList.Operator.MUST_PASS_ALL,ft1,ft2);

        ValueFilter ft3 = new ValueFilter(CompareFilter.CompareOp.EQUAL, new RegexStringComparator("^beijing"));
        //相当于or
        FilterList filterList1 = new FilterList(FilterList.Operator.MUST_PASS_ONE,filterList,ft3);

        Scan scan = new Scan();
        scan.setFilter(filterList1);

        ResultScanner scanner = table.getScanner(scan);

        Iterator<Result> iterator = scanner.iterator();

        while (iterator.hasNext()){
            System.out.println("====================================");
            Result next = iterator.next();
            byte[] row = next.getRow();
            byte[] f1Id = next.getValue(Bytes.toBytes("f1"), Bytes.toBytes("id"));
            byte[] f1Name = next.getValue(Bytes.toBytes("f1"), Bytes.toBytes("name"));
            byte[] f1Age = next.getValue(Bytes.toBytes("f1"), Bytes.toBytes("age"));
            byte[] f2Id = next.getValue(Bytes.toBytes("f2"), Bytes.toBytes("id"));
            byte[] f2Name = next.getValue(Bytes.toBytes("f2"), Bytes.toBytes("name"));
            byte[] f2Age = next.getValue(Bytes.toBytes("f2"), Bytes.toBytes("age"));
            byte[] f2Addr = next.getValue(Bytes.toBytes("f2"), Bytes.toBytes("addr"));

            System.out.println(Bytes.toString(row)+":f1Id="+f1Id+"/f1Name="+f1Name+"/f1Age="+f1Age+"/f2Id="+f2Id+"/f2Name="+f2Name+"/f2Age"+f2Age+"/f2Addr="+f2Addr);
        }

        conn.close();
    }

返回
====================================
r1:f1Id=[B@292b08d6/f1Name=null/f1Age=null/f2Id=null/f2Name=null/f2Agenull/f2Addr=[B@22555ebf
====================================
r2:f1Id=[B@36ebc363/f1Name=[B@45752059/f1Age=null/f2Id=[B@34e9fd99/f2Name=[B@3c41ed1d/f2Age[B@54d9d12d/f2Addr=[B@38425407
====================================
r3:f1Id=[B@43bc63a3/f1Name=[B@702657cc/f1Age=[B@6a6cb05c/f2Id=[B@40a4337a/f2Name=[B@6025e1b6/f2Age[B@22ff4249/f2Addr=[B@2d1ef81a

-----------------------------------------------------------------------------------------------------------------------

在hbase shell中put 数值类型，hbase存入的是字符串

-----------------------------------------------------------------------------------------------------------------------

hbase计数器
shell 操作方式
incr 'ns2:t6', 'r1', 'f1:click', 1
incr 'ns2:t6', 'r1', 'f1:click', -1
incr 'ns2:t6', 'r1', 'f1:click', 5
获取计数值
get_counter 'ns2:t6', 'r1', 'f1:click'

代码实现
public void testIncr() throws IOException {
        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);

        TableName tableName = TableName.valueOf("ns2:t6");
        Table table = conn.getTable(tableName);

        Increment incr = new Increment(Bytes.toBytes("r1"));
        incr.addColumn(Bytes.toBytes("f1"), Bytes.toBytes("click"), 1);
        incr.addColumn(Bytes.toBytes("f1"), Bytes.toBytes("daily"), 10);
        incr.addColumn(Bytes.toBytes("f1"), Bytes.toBytes("weekly"), 30);
        incr.addColumn(Bytes.toBytes("f1"), Bytes.toBytes("monthly"), 50);
        table.increment(incr);

        conn.close();
    }

------------------------------------------------------------------------------------------------------------------------

协处理器Coprocessor
 批处理的，等价于存储过程或者触发器
 协处理器是跟区域HRegion关联的

----------------

 Observer  //观察者，类似于触发器，基于事件的，发生动作时，会回调相应方法
 RegionObserver:用户可以用这种的处理器处理数据修改事件，它们与表的region联系紧密
 MasterObserver:可以被用作管理或DDL类型的操作，这些是集群级别的事件
 WALObserver:提供控制WAL的钩子函数

----------------

Endpoint //终端，类似于存储过程，客户端发起指令调用


----------------

可以从配置文件中加载全局协处理器hbase-site.xml
<!--加载在HRegion区域中的协处理器-->
<property>
	<name>hbase.coprocessor.region.classes</name>
	<value>coprocessor.RegionObserverExample,coprocessor.AnotherCoprocessor</value>
</property>
<!--加载在master中的协处理器-->
<property>
	<name>hbase.coprocessor.master.classes</name>
	<value>coprocessor.MasterObserverExample</value>
</property>
<!--加载在HRegionServer的WAL写前日志中的协处理器-->
<property>
	<name>hbase.coprocessor.wal.classes</name>
	<value>coprocessor.WALObserverExample,bar.foo.MyWALObserver</value>
</property>

-----------------------


endpoint实现
有如下数据
ROW                              COLUMN+CELL                                                                                  
 id1                             column=0:c, timestamp=1554270618545, value=100                                               
 id2                             column=0:c, timestamp=1554270624774, value=200                                               
 id3                             column=0:c, timestamp=1554270630368, value=300                                               
 id4                             column=0:c, timestamp=1554270637156, value=400                                               
 id5                             column=0:c, timestamp=1554270643199, value=500   


下载protobuf2.5
https://github.com/protocolbuffers/protobuf/releases/tag/v2.5.0
tar -zxvf protobuf-2.5.0.tar.gz -C /usr/local/src
cd /usr/local/src/protobuf-2.5.0
./configure --prefix=/usr/local/protobuf
make
make check
make install
添加环境变量
vi /etc/profile
PROTOBUF_HOME=/usr/local/protobuf
PATH=$PATH:PROTOBUF_HOME/bin
export PROTOBUF_HOME PATH

编写proto文件
vi count_sum.proto

syntax = "proto2";
option java_package = "com.hny.hbase.coprocessor";  //工程下的包名
option java_outer_classname = "CountAndSumProtocol";  //类名
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

message CountAndSumRequest {    //入参
    required string family = 1;
    required string column = 2;
}

message CountAndSumResponse {   //返回值
    required int64 count = 1 [default = 0];
    required double sum = 2 [default = 0];
}

service RowCountAndSumService {   //service
  rpc getCountAndSum(CountAndSumRequest)
    returns (CountAndSumResponse);
}

在Linux下执行  protoc --java_out=./ count_sum.proto 在当前路径生成java文件
复制到idea对应的工程路径下

编写代码继承这个类

package com.hny.hbase.coprocessor;

import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcController;
import com.google.protobuf.Service;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.Coprocessor;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.coprocessor.CoprocessorException;
import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.protobuf.ResponseConverter;
import org.apache.hadoop.hbase.regionserver.InternalScanner;
import org.apache.hadoop.hbase.util.Bytes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CountAndSum extends CountAndSumProtocol.RowCountAndSumService implements Coprocessor, CoprocessorService {

    private RegionCoprocessorEnvironment env;

    @Override
    public void getCountAndSum(RpcController controller, CountAndSumProtocol.CountAndSumRequest request, RpcCallback<CountAndSumProtocol.CountAndSumResponse> done) {
        String family = request.getFamily();
        if (null == family || "".equals(family)) {
            throw new NullPointerException("you need specify the family");
        }
        String column = request.getColumn();
        if (null == column || "".equals(column)) {
            throw new NullPointerException("you need specify the column");
        }
        Scan scan = new Scan();
        scan.addColumn(Bytes.toBytes(family), Bytes.toBytes(column));

        CountAndSumProtocol.CountAndSumResponse response = null;
        InternalScanner scanner = null;
        try {
            // 计数
            long count = 0;
            // 求和
            double sum = 0;

            scanner = env.getRegion().getScanner(scan);
            List<Cell> results = new ArrayList<>();
            boolean hasMore;
            // 切记不要用while(){}的方式，这种方式会丢失最后一条数据
            do {
                hasMore = scanner.next(results);
                if (results.isEmpty()) {
                    continue;
                }
                Cell kv = results.get(0);
                double value = 0;
                try {
                    value = Double.parseDouble(Bytes.toString(CellUtil.cloneValue(kv)));
                } catch (Exception e) {
                }
                count++;
                sum += value;
                results.clear();
            } while (hasMore);

            // 生成response
            response = CountAndSumProtocol.CountAndSumResponse.newBuilder().setCount(count).setSum(sum).build();
        } catch (IOException e) {
            e.printStackTrace();
            ResponseConverter.setControllerException(controller, e);
        } finally {
            if (scanner != null) {
                try {
                    scanner.close();
                } catch (IOException ignored) {
                }
            }
        }
        done.run(response);
    }

    @Override
    public void start(CoprocessorEnvironment env) throws IOException {
        if (env instanceof RegionCoprocessorEnvironment) {
            this.env = (RegionCoprocessorEnvironment) env;
        } else {
            throw new CoprocessorException("Must be loaded on a table region!");
        }
    }

    @Override
    public void stop(CoprocessorEnvironment env) throws IOException {
        // do nothing
    }

    @Override
    public Service getService() {
        return this;
    }
}

----------------------------------
静态部署
将jar包上传到hbase各个区域服务器的lib目录下
然后修改各个区域服务器的hbase-site.xml添加
<property>
    <name>hbase.coprocessor.region.classes</name>
    <value>com.wyd.hbase.observer.CountAndSum</value>
</property>
然后在client端写代码
package com.wyd.hbase.client;

import com.wyd.hbase.coprocessor.CountAndSumProtocol;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;
import org.apache.hadoop.hbase.client.Table;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.apache.hadoop.hbase.util.Bytes;

import java.io.IOException;
import java.util.Map;

public class CountAndSumClient {

    public static class CountAndSumResult {
        public long count;
        public double sum;

    }

    private Connection connection;

    public CountAndSumClient(Connection connection) {
        this.connection = connection;
    }

    public CountAndSumResult call(String tableName, String family, String column, String
            startRow, String endRow) throws Throwable {
        Table table = connection.getTable(TableName.valueOf(Bytes.toBytes(tableName)));
        final CountAndSumProtocol.CountAndSumRequest request = CountAndSumProtocol.CountAndSumRequest
                .newBuilder()
                .setFamily(family)
                .setColumn(column)
                .build();

        byte[] startKey = (null != startRow) ? Bytes.toBytes(startRow) : null;
        byte[] endKey = (null != endRow) ? Bytes.toBytes(endRow) : null;
        // coprocessorService方法的第二、三个参数是定位region的，是不是范围查询，在startKey和endKey之间的region上的数据都会参与计算
        Map<byte[], CountAndSumResult> map = table.coprocessorService(CountAndSumProtocol.RowCountAndSumService.class,
                startKey, endKey, new Batch.Call<CountAndSumProtocol.RowCountAndSumService,
                        CountAndSumResult>() {
                    @Override
                    public CountAndSumResult call(CountAndSumProtocol.RowCountAndSumService service) throws IOException {
                        BlockingRpcCallback<CountAndSumProtocol.CountAndSumResponse> rpcCallback = new BlockingRpcCallback<>();
                        service.getCountAndSum(null, request, rpcCallback);
                        CountAndSumProtocol.CountAndSumResponse response = rpcCallback.get();
                        //直接返回response也行。
                        CountAndSumResult responseInfo = new CountAndSumResult();
                        responseInfo.count = response.getCount();
                        responseInfo.sum = response.getSum();
                        return responseInfo;
                    }
                });

        CountAndSumResult result = new CountAndSumResult();
        for (CountAndSumResult ri : map.values()) {
            result.count += ri.count;
            result.sum += ri.sum;
        }

        return result;
    }

}
调用测试代码
package com.wyd.hbase.client;


import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;

public class Test {
    public static void main(String[] args) throws Throwable {
        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);

        String tableName = "test";
        CountAndSumClient client = new CountAndSumClient(conn);
        CountAndSumClient.CountAndSumResult result = client.call(tableName, "0", "c", null, null);

        System.out.println("count: " + result.count + ", sum: " + result.sum);
    }
}

---------------------------------
动态调用
https://yq.aliyun.com/articles/670075
https://github.com/fayson/cdhproject/blob/master/hbasedemo/proto/MyFirstCoprocessor.proto
详见新hbase笔/hbasedemo项目

代码调用
/**
     *给表动态加载协处理器
     * @param connection
     * @param table
     * @param jarPath
     * @param cls
     */
    public static void setupToExistTable(Connection connection, Table table, String jarPath, Class<?>... cls) {
        try {
            if(jarPath != null && !jarPath.isEmpty()) {
                Path path = new Path(jarPath);
                HTableDescriptor hTableDescriptor = table.getTableDescriptor();
                for(Class cass : cls) {
                    hTableDescriptor.addCoprocessor(cass.getCanonicalName(), path, Coprocessor.PRIORITY_USER, null);
                }
                connection.getAdmin().modifyTable(table.getName(), hTableDescriptor);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 删除HBase表上的协处理器
     * @param connection
     * @param table
     * @param cls
     */
    public static void deleteCoprocessor(Connection connection, Table table, Class<?>... cls) {
        System.out.println("begin delete " + table.getName().toString() + " Coprocessor......");
        try {
            HTableDescriptor hTableDescriptor = table.getTableDescriptor();
            for(Class cass : cls) {
                hTableDescriptor.removeCoprocessor(cass.getCanonicalName());
            }
            connection.getAdmin().modifyTable(table.getName(), hTableDescriptor);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("end delete " + table.getName().toString() + " Coprocessor......");
    }

----------------

shell调用



需要在hbase-site.xml中添加
<property>
  <name>hbase.table.sanity.checks</name>
  <value>false</value>
</property>

create 'guanzhu', 'f1'
create 'fensi', 'f1'

在代码中写
package com.wyd.hbase.observer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.coprocessor.BaseRegionObserver;
import org.apache.hadoop.hbase.coprocessor.ObserverContext;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.regionserver.wal.WALEdit;

import java.io.IOException;

public class InvertedCoprocessor extends BaseRegionObserver {



    @Override
    public void prePut(ObserverContext<RegionCoprocessorEnvironment> e, Put put, WALEdit edit, Durability durability) throws IOException {
        byte[] row = put.getRow();
        Cell cell = put.get("f1".getBytes(), "from".getBytes()).get(0);
        Put putIndex = new Put(cell.getValueArray(), cell.getValueOffset(),
                cell.getValueLength());
        putIndex.addColumn("f1".getBytes(), "from".getBytes(), row);
        Configuration conf = HBaseConfiguration.create();
        Connection conn = ConnectionFactory.createConnection(conf);

        TableName tableName = TableName.valueOf("fensi");
        Table table = conn.getTable(tableName);

        table.put(putIndex);

        conn.close();
    }
}

打包上传到hdfs


disable 'guanzhu'
alter 'guanzhu', METHOD => 'table_att', 'Coprocessor'=>'hdfs://hdp12/hbase/coprocessor/MycountAndSum.jar|com.wyd.hbase.observer.InvertedCoprocessor|1001|参数...'
															 调用级别


enable 'guanzhu'

这样 put 'guanzhu', 'r1', 'f1:from', 'a'
在'fensi'里也会添加一条
ROW                                                          COLUMN+CELL                                                       a                                                           column=f1:from, timestamp=1554288186666, value=r1 

这就是倒排索引

命令行卸载hbase表上协处理器
disable 'guanzhu'
alter 'guanzhu', METHOD => 'table_att_unset', NAME=>'coprocessor$1'
enable 'guanzhu'

-----------------------------------------------------------------------------------------------------------------------

Hbase连接池工具类
package com.wyd.hbase.util;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.client.Connection;
import org.apache.hadoop.hbase.client.ConnectionFactory;

import java.io.IOException;

public class HBaseUtil {

    //private static final String QUORUM = "192.168.1.100";
    //private static final String CLIENTPORT = "2181";
    private static Configuration conf = null;
    private static Connection conn = null;

    public static synchronized Configuration getConfiguration(){
        if(conf == null){
            conf = HBaseConfiguration.create();
            //conf.set("hbase.zookeeper.quorum", QUORUM);
            //conf.set("hbase.zookeeper.property.clientPort", CLIENTPORT);
        }
        return conf;
    }

    public static synchronized Connection getConnection() throws IOException {
        if(conn == null){
            conn = ConnectionFactory.createConnection(getConfiguration());
        }
        return conn;
    }

}
qunuan




----------------------------------------------------------------------------------------------------
HTable连接池问题，和shell中移除coprocessor问题还没解决

盐析 salt rowKey的前缀

不要用时间片做rowKey的高位

通话记录表设计
用    regNo+主叫+callTime(yyyyMMddHHmmss)+被叫+拨打时间(00000s)当主键
regNo = (主叫+yyyyMM).hashCode() & Integer.MAXVALUE % 分区数(设置100个region)
这样数据就会按照regNo存储到对应的分区中


创建主叫表
create 'ns1:t1', 'f', SPLITS => ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99']
创建被叫表
...



alter 'ns1:t1', METHOD => 'table_att', 'Coprocessor1'=>'hdfs://hdp12/hbase/coprocessor/MycountAndSum.jar|com.wyd.hbase.observer.CallLogCoprocessor|1002|'

alter 'ns1:t1', METHOD => 'table_att', 'Coprocessor1'=>'hdfs://hdp12/hbase/coprocessor/original-hbasetest-1.0-SNAPSHOT.jar|com.wyd.hbase.coprocessor.observer.CallLogCoprocessor|1001'

alter 'ns1:t1', METHOD => 'table_att_unset', NAME=>'coprocessor$1'
enable 'guanzhu'



前包后不包
/**
   * Create a Scan operation for the range of rows specified.
   * @param startRow row to start scanner at or after (inclusive)
   * @param stopRow row to stop scanner before (exclusive)
   */
  public Scan(byte [] startRow, byte [] stopRow) {
    this.startRow = startRow;
    this.stopRow = stopRow;
    //if the startRow and stopRow both are empty, it is not a Get
    this.getScan = isStartRowAndEqualsStopRow();
  }

如果查3月份通话详单，
new Scan(Bytes.toBytes(reNo+callid+"201703"),Bytes.toBytes(reNo+callid+"201704"))




























